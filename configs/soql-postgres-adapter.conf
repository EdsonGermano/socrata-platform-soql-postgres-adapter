# Config for secondary-watcher and soql-server-pg
# Used for running the service locally as a process or in a docker container

common-host = "local.dev.socrata.net"
common-pg-port = 5432
common-qs-pg-port = 6050

common-zk-ensemble = ["local.dev.socrata.net:2181"]

# Currently the query coordinator is hard-coded to use "primus" as the instance namespace
data-coordinator-instance = "primus"

common-database {
  host = ${common-host}
  port = ${common-pg-port}
  username = "blist"
  password = "blist"
  c3p0 {
    maxPoolSize = 20
    idleConnectionTestPeriod = 60
    testConnectionOnCheckin = true
    preferredTestQuery = "SELECT 1"
    maxIdleTimeExcessConnections = 300
  }
}

common-log4j {
  rootLogger = [ INFO, console ]
  appender {
    console.class = org.apache.log4j.ConsoleAppender
    console.props {
      layout.class = org.apache.log4j.PatternLayout
      layout.props {
        ConversionPattern = "[%t] %p %c{1} %d %m%n"
      }
    }
  }
}

curator {
  ensemble = ${common-zk-ensemble}
  namespace = "com.socrata/soda"
  session-timeout = 40s
  connect-timeout = 5s
  base-retry-wait = 100ms
  max-retry-wait = 10s
  max-retries = 29
}


com.socrata.pg.store {
  database = ${common-database} {
    database = secondary
    app-name = "pg-secondary-store"
  }
  log4j = ${common-log4j} {
    logger.com.socrata = TRACE
  }
}

com.socrata.coordinator.common = {
  database = ${common-database} {
    app-name = "data coordinator"
    database = "datacoordinator"
  }
  instance = ${data-coordinator-instance}
  secondary {
    defaultGroups = [pg,spandex]
    path = ${user.home}/secondary-stores
    groups {
      pg {
        numReplicas = 1
        instances = [pg]
      }
      spandex {
        numReplicas = 1
        instances = [spandex]
      }
      geocoding {
        numReplicas = 1
        instances = [geocoding]
      }
    }
    instances {
      # this needs to be here for config parsing; but should be empty
    }
  }
  log4j = ${common-log4j} {
    logger.com.socrata = TRACE
  }
}

com.socrata.soql-server-pg {
  port = ${common-qs-pg-port}
  curator = ${curator}
  instance = ${data-coordinator-instance}
  service-advertisement.address = ${common-host}

  service-advertisement {
    base-path = "/services"
    name = "pg"
  }
  store = ${com.socrata.coordinator.common} {
    database {
         database = "secondary"
         app-name = "pg secondary store"
        }
  }
  log4j = ${common-log4j} {
    logger.com.socrata = TRACE
  }
  migrations {
    database = ${common-database} {
      app-name = "soql-server-pg"
      database = "secondary"
    }
    log4j = ${common-log4j}
  }
}

com.socrata.coordinator.secondary-watcher.secondary.instances = {
  pg {
    secondaryType = pg
    config = ${com.socrata.pg.store}
    numWorkers = 2
 }
}

com.socrata.coordinator.secondary-watcher = ${com.socrata.coordinator.common} {
  database.app-name = "data coordinator secondary watcher"
  claim-timeout = 5m
  watcher-id = 61e9a209-98e7-4daa-9c43-5778a96e1d8a

  curator =  ${curator}

  service-advertisement.address = ${common-host}

  service-advertisement {
    service-base-path = "/services"
    name = "data-coordinator"
  }

  // TODO: can these new things just be in the reference.conf in data-coordinator?
  collocation {
    lock-path = "collocation-lock"
    lock-timeout = 10s // note: it is expected that collocation request should be reasonable fast
  }

  metrics {
    # Should be unique for each service
    prefix = "com.socrata.data.coordinator"
    log-metrics = false
    enable-graphite = false
  }
  tmpdir = ${java.io.tmpdir}
}
